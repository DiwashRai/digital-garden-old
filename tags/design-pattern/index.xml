<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>design pattern on</title><link>https://diwashrai.github.io/digital-garden/tags/design-pattern/</link><description>Recent content in design pattern on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://diwashrai.github.io/digital-garden/tags/design-pattern/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://diwashrai.github.io/digital-garden/Decorator-DesignPattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://diwashrai.github.io/digital-garden/Decorator-DesignPattern/</guid><description>Reference:
Topics:
Summary The decorator design pattern allows behaviour to be added to an object, either statically or dynamically, without affecting the behaviour of other objects from the same class.</description></item><item><title>Strategy Design Pattern</title><link>https://diwashrai.github.io/digital-garden/Strategy-DesignPattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://diwashrai.github.io/digital-garden/Strategy-DesignPattern/</guid><description>Reference:
Topics:
Summary The strategy design pattern is a behavioural design pattern that allows you to define a &amp;lsquo;family&amp;rsquo; of algorithms, encapsulate each one, and make them interchangeable.</description></item></channel></rss>